Sigma Block
-----------

A multiply and accumulate using sides A and B multiplied (and optionally scaled by division by 16) and the IN added.
The result is the output modulo 16. No consideration for carries between Sigma blocks is allowed in this design.
The scaling is to simulate very low precision fixed point functionality. A modulo 16 additive inverse may be
subtracted hence keeping the carries out of it as external redstone signals. This also might prepare the user for
some technology production in the real world where carries lead to bottlenecks in OoO execution of machine instructions.
It also has some useful logic limit (0 or 15) forms which can be dropped by the additive inverse method.

Delta Block
-----------

A simple calculus block. I say simple but actually quite complex in implementation, but simpler to use.
The output is the following including a range scaling:
    OUT = k.(d[A - IN] * [B - IN])/dt + IN
The second mode is an integration like operation also based about IN, and the multiply before application.
An endpoint integral with the time set to an appropriate constant. Both these operators contain memory and have
complex behaviour. The also should both produce a static out value of IN when A and B do not change.

Upsilon Block
-------------

A 15 bit clocked ring. 6 redstone cycles per block. High bit is active high clock in first of 6. Lower 3 bits times
five is block. On next clock data bits are valid. Torch off is data set mode. If A = B and valid, then bit set with
both 0 being master set clock even if 7th IN has no set clock bit. 1 to 15 set appropriate bit in packet OUT on top IN.
Different A and B in data set mode makes a slave set node which doesn't set an unset clock for ring integrity check.
Torch on is data read mode. If data decode from IN is valid, and bit numbers A and B are both valid true, then OUT = 15,
else 0. Using this kind of select allows for 105 up to selectors. Select divisions, wait for poll responses.
Select zero on data read is clock bit. The allows a bus free if data set mode needs a master clock set. Multi packet
clocks are data invalidate. Data OUT is held until next valid decode or A or B change. As a convenience OUT is +7 more
for quick inserts on 7 redstone dust between. If clock nibble > 8, then gain reduces IN for packet data.
Data drops can side chain redstone sections. The master resets all bits in packet to zero.

Quality number wang ... 105 ... 3 selections, 105 * 13 / 3 = 455 ... 455 + 105 = 561 - 1 ...
4 selectors, 560 * 12 / 4 = 1680 ...

Pi Block
--------

Synchronous oscillator when torch on. IN sets max count to reset next cycle. A and B are triggers or'ed together.
Count continues after trigger until reset. Then trigger OR is checked to escape reset. This allows a 16 count with IN
zero on trigger. Trigger level is greater than zero for active and zero for inactive. Trigger can be made inactive
and count will still continue until reset is entered.

When set in the torch off mode, a nice equality inverter is made. This gives a full:
    OUT = (15 - IN) * (A = B) + IN * (A != B)
Long chains just alternate and alternate drive so don't lose signal.