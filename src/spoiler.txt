Sigma Block
-----------

A multiply and accumulate using sides A and B multiplied (and optionally scaled by division by 16) and the IN added.
The result is the output modulo 16. No consideration for carries between Sigma blocks is allowed in this design.
The scaling is to simulate very low precision fixed point functionality. A modulo 16 additive inverse may be
subtracted hence keeping the carries out of it as external redstone signals. This also might prepare the user for
some technology production in the real world where carries lead to bottlenecks in OoO execution of machine instructions.
It also has some useful logic limit (0 or 15) forms which can be dropped by the additive inverse method.

Delta Block
-----------

A simple calculus block. I say simple but actually quite complex in implementation, but simpler to use.
The output is the following including a range scaling:
    OUT = k.(d[A - IN] * [B - IN])/dt + IN
The second mode is an integration like operation also based about IN, and the multiply before application.
An endpoint integral with the time set to an appropriate constant. Both these operators contain memory and have
complex behaviour. The also should both produce a static out value of IN when A and B do not change.

Upsilon Block
-------------

<<still thinking>> division zero, singularity, factor groups, etc ...

Pi Block
--------

Equality synchronous RAM. If A = B, location IN gets written with AB, and/or else read location IN to OUT. This makes
for easy read write control by interception of either A or B. It provides a massive 16 nibbles of memory and decode.
When set in the torch on mode, a nice equality inverter is made. This gives a full:
    OUT = (15 - IN) * (A = B) + IN * (A != B)
Long chains just alternate and alternate drive so don't lose signal.